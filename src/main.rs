use evm_rs_emulator::Runner;

fn main() {
    let caller = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xc4, 0x11, 0xe8,
    ];
    let origin: Option<[u8; 20]> = None;
    let address: Option<[u8; 20]> = Some([
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xc4, 0x11, 0xee,
    ]);
    let value: Option<[u8; 32]> = None;
    let data: Option<Vec<u8>> = None;
    let bytecode: Vec<u8> = vec![0x60, 0x01, 0x60, 0x01, 0x60, 0x01];
    
    // Create a new interpreter
    let mut runner =
        Runner::new(caller, origin, address, value, data, None);
    runner.bytecode = bytecode;
    runner.debug_level = Some(255);
    let _ = runner.interpret_op_code(runner.bytecode[runner.pc]);
}
